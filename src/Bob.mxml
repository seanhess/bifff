<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute">
	
	$("#left_list").select(function() {
		$("#bob_list").value($(my_list).selectedItem);
	});
	
	<Rule target="#left_list">
		<Select>
			
		</Select>
	</Rule>
	
	<Rule target="#view_stack">
		<Bind source="#view_stack" sourceKey="" target="#asdf" targetKey=""/>
	</Rule>
	
	
	
	
	EXAMPLE - Editable Item Container
		I want to print out a simple container of stuff
		and at runtime, I want a way to add this spiffy thing over the top
		when they mouse over.
		
		You can accomplish multiple behaviors by specifying multiple classnames
		
		
	A WAY TO TACK ON - the views afterward? So, rather than specifying actual MXML components, you specify fake ones
		and we inject everything afterwards
		
	SO, WHAT ARE YOU SPECIFYING - (the basic structure: List, Control, Container) (Static and Button are too close) (Container should be able to manipulate its own children)
	
		(So, just Container and Control)
	
	<Container type="childPhoto">
		<Control type="image"/>
		<Control type="text"/>
	</Container>
	
	<Container type="sideNav">
		<Control label="Summary"/>
		<Control label="Identity"/>
		<Control label="Appearance"/>
		<Control label="Medical"/>
		<Control label="Friends and Family"/>
		<Control label="School"/>
	</Container>
	
	<Container type="viewStack">
		<Container type="subContainer">
			<!-- a subContainer, as we know, needs some specific stuff, like the three side navigations -->
		</Container>
	</Container>
	
	<Control types="">
		
	</Control> 
		
	GOALS GOALS GOALS	
		- encapsulation - each view should be really simple, so you can actually reuse it. 
		- views do not include behavior -
		- views are stateful -
		- states are driven from the outside -
		- behaviors are totally overrideable -
		
		
	VIEWS
		- don't even fix themselves
		- they just specify what is on the freaking page
		- 
	
	
	LOGIN VIEW
		- just a list of the controls on the page
		
		Static Text: Authorization Required
		Static Text: username
		Static Text: password
		Field: username
		Field: password
		Button: Login
		Button: I Forgot
		Button: Not already registered?
		
	LAYOUT
		Manual? - 
		
	STYLE
		
		
	BEHAVIOR
	
	
		
	Nesting makes everything more confusing... What if there was an effecient way to build views that wasn't nested?
		
	
	
	So, every actual component is data driven. They just accept junk like the ones I provide.. 
		
	
	
	<!-- SPLIT THIS INTO GROUPS -->
	
	FIRST GROUP - Ability to inject behavior into a view
		- in other words, you just throw views together
		- you have some way of listening for their dispatched events / bindable properties
		- you can then do whatever you want (call actionscript, etc)
		
	SECOND GROUP - Ability to define properties via css
	
	THIRD GROUP - 
	
	SUPERVISING PRESENTER - Ability to supervise the view from the outside using a presenter
		- this presenter has full knowledge of the view
		- the view is ABSOLUTELY clueless
		- all the view does is put some stuff together
		
		- the presenter gets data from the outside, etc
		
		
		






	
	
	
</mx:Application>
